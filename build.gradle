import org.groovymc.groovybundler.bundle.Bundler
import org.groovymc.modsdotgroovy.core.Platform
import org.groovymc.modsdotgroovy.gradle.tasks.AbstractGatherPlatformDetailsTask
import org.groovymc.modsdotgroovy.gradle.tasks.AbstractMDGConvertTask

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    alias libs.plugins.mdg
    alias libs.plugins.nexuspublish
}

apply from: 'version.gradle'

modsDotGroovy {
    multiplatform {
        expose()
    }
    platforms.set([Platform.FABRIC])
    inferGather.set false
    enable()
    apply()
}

tasks.withType(AbstractMDGConvertTask).configureEach {
    dependsOn configurations.bundle
    buildProperties.put 'bundled', provider {
        configurations.bundle.resolvedConfiguration.resolvedArtifacts.collect { "${it.moduleVersion.id.name}-${it.moduleVersion.id.version}.jar" as String }
    }
}

tasks.withType(AbstractGatherPlatformDetailsTask).configureEach {
    minecraftVersion = '0.0.0'
    platformVersion = 'unspecified'
}

group = 'org.groovymc'

repositories {
    mavenCentral()
}

configurations {
    jacksonResolve
    bundle
    bundleApi
    api.extendsFrom(bundleApi)
    bundle.extendsFrom(bundleApi)
    bundleDependency
    bundle.extendsFrom(bundleDependency)

    bundle {
        exclude(group: 'org.ow2.asm')
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.version == '<jackson-resolve>') {
            details.useVersion configurations.jacksonResolve.resolvedConfiguration.resolvedArtifacts.find {
                it.moduleVersion.id.group == details.requested.group && it.moduleVersion.id.name == details.requested.name
            }.moduleVersion.id.version
        }
    }
}

processResources {
    exclude 'mods.groovy'
    from(rootProject.file('LICENSE')) {
        into 'META-INF'
    }
}

tasks.register('bundle', Bundler) {
    dependsOn configurations.bundle
    bundleConfiguration = configurations.bundle
    outputDirectory = layout.buildDirectory.dir("bundler")
    modType = 'LIBRARY'
    modulePrefix = 'org.groovymc.groovybundler.jij'
}

dependencies {
    jacksonResolve libs.groovy.toml

    bundleApi libs.groovy.core
    bundleApi libs.groovy.contracts
    bundleApi libs.groovy.datetime
    bundleApi libs.groovy.nio
    bundleApi libs.groovy.macro.core
    bundleApi libs.groovy.macro.library
    bundleApi libs.groovy.templates
    bundleApi libs.groovy.xml
    bundleApi libs.groovy.typecheckers
    bundleApi libs.groovy.dateutil
    bundleApi libs.groovy.ginq
    bundleApi libs.groovy.toml
    bundleApi libs.groovy.json

    bundleDependency libs.jackson.core
    bundleDependency libs.jackson.annotations
    bundleDependency libs.jackson.databind
    bundleDependency libs.jackson.dataformat.toml

    bundleApi libs.opensesame.groovy
    bundleApi libs.opensesame.core
    bundleDependency libs.opensesame.compile
}

jar {
    dependsOn tasks.bundle
    from(bundle.outputDirectory)
    manifest {
        attributes(
            'FMLModType': 'LIBRARY',
            'Automatic-Module-Name': "${project.group}.${project.name}",
            'Specification-Version': project.version,
            'Implementation-Commit-Time': versioning.getGitCommitDate(),
            'Implementation-Commit': versioning.getGitCommit(),
        )
    }
}

java.withSourcesJar()
java.withJavadocJar()

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "GroovyBundler"
                packaging = 'jar'
                description = 'Bundles groovy and other library versions to be used in common throughout GroovyMC projects'
                url = 'https://github.com/GroovyMC/GroovyBundler'
                inceptionYear = '2023'

                licenses {
                    license {
                        name = 'BSD 3-Clause'
                        url = 'https://opensource.org/license/bsd-3-clause/'
                    }
                }
                developers {
                    developer {
                        id = 'groovymc'
                        name = 'GroovyMC'
                        email = 'holdings@groovymc.org'
                        url = 'https://github.com/GroovyMC/'
                    }
                }
                scm {
                    connection='scm:git:git://github.com/GroovyMC/GroovyBundler.git'
                    url='https://github.com/GroovyMC/GroovyBundler'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username.set(System.getenv('SONATYPE_USER') ?: '')
            password.set(System.getenv('SONATYPE_PASSWORD') ?: '')
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
        }
    }
}

if (System.getenv('SONATYPE_USER')) {
    signing {
        final signingKey = System.getenv('SIGNING_KEY') ?: ''
        final signingPassword = System.getenv('SIGNING_PASSWORD') ?: ''
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}
